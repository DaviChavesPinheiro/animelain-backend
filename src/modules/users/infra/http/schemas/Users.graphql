# import Anime from '../../../../animes/infra/http/schemas/Animes.graphql';

directive @auth(
  requiresRoles: [String] = ["admin"],
) on FIELD_DEFINITION

input ResetPasswordInput {
  password: String!
  token: String!
}

input SendForgotPasswordEmailInput {
  email: String!
}

input CreateSessionInput {
  email: String!
  password: String!
}

input UpdateUserInput {
  id: String!
  name: String
  email: String
}

input CreateUserInput {
  name: String!
  email: String!
  password: String!
}

type FavoriteAnimeEdge {
  id: String!
  user_id: String!
  anime_id: String!
  node: Anime!
  created_at: String!
  updated_at: String!
}

type RecentAnimeEdge {
  id: String!
  user_id: String!
  anime_id: String!
  node: Anime!
  created_at: String!
  updated_at: String!
}

type FavoriteAnimeConnection {
  edges: [FavoriteAnimeEdge!]!
}

type RecentAnimeConnection {
  edges: [RecentAnimeEdge!]!
}

type Favorites {
  animes: FavoriteAnimeConnection!
}

type Recents {
  animes: RecentAnimeConnection!
}

type Session {
  user: User!
  token: String!
}

type User {
  id: ID!
  name: String!
  email: String!
  avatar: String
  avatar_url: String
  isAdmin: Boolean!
  favorites: Favorites!
  recents: Recents!
  created_at: String!
  updated_at: String!
}

type Query {
  users: [User!]!
  user(id: String!): User
}

type Mutation {
  createUser(data: CreateUserInput!): User! @auth(requiresRoles: ["admin"])
  updateUser(data: UpdateUserInput!): User!

  createSession(data: CreateSessionInput!): Session!

  sendForgotPasswordEmail(data: SendForgotPasswordEmailInput!): Boolean!

  resetPassword(data: ResetPasswordInput!): Boolean!
}
