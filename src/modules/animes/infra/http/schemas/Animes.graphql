# import User from '../../../../users/infra/http/schemas/Users.graphql';
# import Character from '../../../../characters/infra/http/schemas/Characters.graphql';
# import Category from '../../../../categories/infra/http/schemas/Categories.graphql';
input RemoveGenreAnimeInput {
  categoryId: String!
  animeId: String!
}

input AddGenreAnimeInput {
  score: Int
  categoryId: String!
  animeId: String!
}

input RemoveCharacterAnimeInput {
  characterId: String!
  animeId: String!
}

input AddCharacterAnimeInput {
  role: CharacterAnimeRoles
  characterId: String!
  animeId: String!
}

input UpdateAnimeInput {
  id: String!
  title: String
  description: String
  episodesAmount: Int
}

input CreateAnimeInput {
  title: String!
  description: String
  episodesAmount: Int
}

enum CharacterAnimeRoles {
  MAIN,
  SUPPORTING,
  BACKGROUND
}

type CharacterAnimeEdge {
  id: String!
  role: CharacterAnimeRoles
  characterId: String!
  animeId: String!
  node: Character!
  createdAt: String!
  updatedAt: String!
}

type GenreAnimeEdge {
  id: String!
  score: Int
  categoryId: String!
  animeId: String!
  node: Category!
  createdAt: String!
  updatedAt: String!
}

type CharacterAnimeConnection {
  edges: [CharacterAnimeEdge!]!
}

type GenreAnimeConnection {
  edges: [GenreAnimeEdge!]!
}

type Anime {
  id: ID!
  title: String!
  description: String
  episodesAmount: Int
  profile: String
  banner: String
  profileUrl: String
  bannerUrl: String
  createdBy: User
  characters: CharacterAnimeConnection!
  genres: GenreAnimeConnection!
  createdAt: String!
  updatedAt: String!
}

type Query {
  animes: [Anime]!
  anime(id: String!): Anime
}

type Mutation {
  createAnime(data: CreateAnimeInput!): Anime! @auth(requiresRoles: ["admin"])
  updateAnime(data: UpdateAnimeInput!): Anime! @auth(requiresRoles: ["admin"])
  deleteAnime(id: String!): Anime! @auth(requiresRoles: ["admin"])

  addCharacterAnime(data: AddCharacterAnimeInput!): CharacterAnimeEdge!
  removeCharacterAnime(data: RemoveCharacterAnimeInput!): CharacterAnimeEdge!

  addGenreAnime(data: AddGenreAnimeInput!): GenreAnimeEdge!
  removeGenreAnime(data: RemoveGenreAnimeInput!): GenreAnimeEdge!
}

